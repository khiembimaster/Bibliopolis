// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  orders        Order[]
  cart          Cart?
  reviews       Review[]

  shippingInfo ShippingInfo?

  Session Session[]
  Account Account?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id                Int             @id @default(autoincrement())
  title             String
  author            String
  isbn              String
  genres            Genre[]
  price             Decimal
  publication_year  DateTime
  description       String          @db.Text
  cover_image       String
  publisher         String
  stock_quantity    Int
  rating            Decimal
  reviews           Review[]
  orders            BooksToOrders[]
  carts             BooksToCarts[]
  PromotionsOnBooks Promotion[]
}

model Genre {
  id          Int    @id @default(autoincrement())
  name        String
  description String @db.Text
  books       Book[]
}

model Order {
  id               String          @id @default(cuid())
  user             User            @relation(fields: [userId], references: [id])
  userId           String
  order_date       DateTime
  books            BooksToOrders[]
  sub_total        Decimal
  shipping_fee     Decimal
  tax              Decimal
  total_price      Decimal
  shippingInfo     ShippingInfo?
  status           OrderStatus     @default(UNPAID)
}

model Cart {
  id          Int            @id @default(autoincrement())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String         @unique
  books       BooksToCarts[]
  total_price Decimal
}

model Review {
  id          Int      @id @default(autoincrement())
  book        Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  rating      Int      @default(5)
  content     String   @db.MediumText
  date_posted DateTime
}

model Promotion {
  id               Int      @id @default(autoincrement())
  description      String
  discount_rate    Int
  start_date       DateTime
  end_date         DateTime
  applicable_books Book[]
}

model ShippingInfo {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique // Link to the Customer
  addressLine1   String
  addressLine2   String?
  city           String
  state          String
  postalCode     String
  country        String
  phone          String?
  deliveryMethod String // E.g., Standard, Express
  trackingNumber String?
  order          Order?   @relation(fields: [orderId], references: [id])
  orderId        String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model BooksToOrders {
  book     Book    @relation(fields: [bookId], references: [id])
  bookId   Int
  order    Order   @relation(fields: [orderId], references: [id])
  orderId  String
  quantity Int
  total    Decimal

  @@id([bookId, orderId])
}

model BooksToCarts {
  book     Book @relation(fields: [bookId], references: [id])
  bookId   Int
  cart     Cart @relation(fields: [cartId], references: [id])
  cartId   Int
  quantity Int

  @@id([bookId, cartId])
}

enum Role {
  USER
  ADMIN
  WAREHOUSE_STAFF
  SALE
}

enum OrderStatus {
  UNPAID
  READY_TO_SHIP
  PROCESSED
  RETRY_SHIP
  SHIPPED
  TO_CONFIRM_RECEIVE
  COMPLETED
  TO_RETURN
  IN_CANCEL
  CANCELLED
}
